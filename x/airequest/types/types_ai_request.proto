syntax = "proto3";
package oraichain.orai.airequest;
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "x/provider/types/types_ds.proto";
import "x/provider/types/types_tc.proto";
option go_package = "github.com/oraichain/orai/x/airequest/types";

message AIRequest {
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1 [(gogoproto.customname) = "RequestID"];
  string oracle_script_name = 2 [ (gogoproto.moretags) = "json:\"oscript_name\""];
  // Owner is the address who is allowed to make further changes to the data source.
  bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",  (gogoproto.moretags) = "json:\"request_creator\""];
  repeated bytes validators = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",  (gogoproto.moretags) = "json:\"validator_addr\""];
  int64 block_height = 5;
  repeated oraichain.orai.provider.AIDataSource ai_data_sources = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "json:\"data_sources\""];
  repeated oraichain.orai.provider.TestCase test_cases = 7 [(gogoproto.nullable) = false, (gogoproto.moretags) = "json:\"test_cases\""];
  repeated cosmos.base.v1beta1.Coin fees = 8 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"transaction_fee\""];
  bytes input = 9 [ (gogoproto.moretags) = "json:\"request_input\""];
  bytes expected_output = 10 [ (gogoproto.moretags) = "json:\"expected_output\""];
}

// Params defines the set of wasm parameters.
message Params {
    option (gogoproto.goproto_stringer) = false;
    uint64 maximum_request_bytes = 1;
}